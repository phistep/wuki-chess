- general
	- check game state function super slow, how to realisticly use it in Game.make_move()
		- move is_stalemate and is_checkmate into Game / just into check_state
		- dont check is_check and king.possible_moves twice
		- profile blocked_by
		- maybe it works now?
	- raise checkmate in board.possible_moves is empty?
	- ai does crash on checkmate -> raise checkmate
	- in make_move shortcut the legality checks if you know the move comes from possible_moves (caching like in VAMP evaluation)
	- give reasons to IllegalMoveError(reason=""), eg check, wrong moving
	- rules
		- pawn promotion (goes in `Piece` and `Pawn`?
			- use exceptions to handle promotion?
			`Piece.move_to()` calls `AbstractPece.move_to()`
			`AbstractPiece.move_to()` just pass in other piece types, raises `PawnPromotionException`
		- draw
			- threefold repitition: same player has same board three times in a row
			- fifty-move rule: 50 moves without captire or pawn move
			- no path to checkmate (ooph)
		- en passent
	- different verbosity for ai and cli https://docs.python.org/3/howto/logging.html
	- check and checkmate gamefile parsing and writing
	- Color.__negate__() -> __not__()
- cli
	- support Portable game notation
		- read and write
		- comments
		- time
		- markers for check etc.
	- interactive mode
		- colorize last move
		- check into prompt, checkmate support
		- use https://docs.python.org/3/library/cmd.html
		- cmd_show: when arguments black/white show all possible movable pieces for player
		- add color block to prompt
		- timestamps and time constraint
		- restore input on `IllegalMoveError` or `MoveParseError`
		- trap ^C
	- convenience flags
		- -q --quiet: only print a move if there is one (by --move or by AI)
		- -w --white-ai,  -b --black-ai, -r --random-ai
		- -W --white-name, -B --black-name (for prompt, pgn file)
		- bong cloud opening
	- box drawing https://en.wikipedia.org/wiki/Box-drawing_character
	- matplotlib for pdf game output
	- localization?
	- online mode (host server, play against players/ais)
- gui
	- print game on quit
	- update UI before AI starts to think
	- loading indicator for AI
	- undo
	- select/load/save game file
	- show current player
	- select opponent: human/ai
	- show captured
	- pawn promotion
	- handle game end
	- icon, app name, about, etc
- ai
	- lookahead
	- evaluation function for each board position
		- init with map for weight for each eval function
		- allow black/whitelist for strategies
		- allow to pass list of custom strategy functions
			- check
			- checkmate
			- capturing (only equal weight or uncovered)
			- pawn promotion
			- double pawns
			- attacks
			- cover
			- freedom of movement
			- pawn walk if noone in front -> promotion
		- error
			Traceback (most recent call last):
			  File "/home/phistep/Projects/chess/wuki/gui.py", line 101, in OnClick
				self.MakeAIMove()
			  File "/home/phistep/Projects/chess/wuki/gui.py", line 149, in MakeAIMove
				piece, target = self.ai.get_move(self.game.boards[-1])
			  File "/home/phistep/Projects/chess/wuki/ai.py", line 35, in get_move
				score = self.evaluate_board(resulting_board)
			  File "/home/phistep/Projects/chess/wuki/ai.py", line 54, in evaluate_board
				results = {f.__name__: f(board, possible_moves) for f in evaluators}
			  File "/home/phistep/Projects/chess/wuki/ai.py", line 54, in <dictcomp>
				results = {f.__name__: f(board, possible_moves) for f in evaluators}
			  File "/home/phistep/Projects/chess/wuki/ai.py", line 65, in eval_captured
				score += weight * self.piece_value[piece.piece] * (-1 if color is self.color else 1)
			KeyError: <AbstractPiece King (K)>
	- multicore evaluation (niceness on unix)
		import multiprocessing as mp
		if not args.processes:
			args.processes = mp.cpu_count()
		with mp.Pool(args.processes) as worker:
			worker.map(run_job, jobs)
- package
	- better readme (rst, examples, todo into own file?)
	- sphinx docs -> ghpages
	- dependencies, installer
		- wxpython
		- sphinx_autodoc_typehints
	- package docsting header (author, etc)
